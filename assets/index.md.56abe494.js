import{o as n,c as a,b as s}from"./app.7cbc1c56.js";const t='{"title":"Home","description":"","frontmatter":{"title":"Welcome","home":true,"heroText":"computed ðŸ“‚","tagline":"Compute data at build-time and use it within your app","actionText":"Get started","actionLink":"/guide/","features":[{"title":"Simple","details":"Easy setup, quick results. Everything is consolidated nicely, no more hacky pre-build scripts."},{"title":"Versatile","details":"Use it to pre-fetch an API, fetch local Markdown files, render dynamic images, and more!"},{"title":"Performant","details":"Save your client\'s time by pre-rendering data at build-time. Only ship what you need using Code Splitting."}],"footer":"MIT Licensed"},"headers":[{"level":3,"title":"Installation","slug":"installation"},{"level":3,"title":"Usage","slug":"usage"}],"relativePath":"index.md","lastUpdated":1619627394786}',e={},p=s('<p>Oftentimes it&#39;s handy to compute some data at build time, like querying an API endpoint, so that it&#39;s faster for the client. This plugin makes it really simple.</p><h3 id="installation"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h3><div class="language-bash"><pre><code><span class="token function">yarn</span> <span class="token function">add</span> -D rollup-plugin-computed\n<span class="token comment"># or using npm</span>\n<span class="token function">npm</span> i -D rollup-plugin-computed\n</code></pre></div><h3 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><div class="language-js"><pre><code><span class="token comment">// rollup.config.js or vite.config.js</span>\n\n<span class="token keyword">import</span> computed <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-computed&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> computers <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n\tplugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span> computers <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>You can access the computed data like this in your app:</p><div class="language-js"><pre><code><span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">&#39;test.computed&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// { hello: &#39;world&#39; }</span>\n</code></pre></div>',7);e.render=function(s,t,e,o,c,l){return n(),a("div",null,[p])};export default e;export{t as __pageData};
