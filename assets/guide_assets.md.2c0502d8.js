import{o as s,c as n,b as a}from"./app.7cbc1c56.js";const e='{"title":"Assets","description":"","frontmatter":{"title":"Assets"},"headers":[{"level":2,"title":"fn","slug":"fn"},{"level":2,"title":"fileExt","slug":"fileext"},{"level":2,"title":"alwaysBuild?","slug":"alwaysbuild"},{"level":2,"title":"fileName?","slug":"filename"}],"relativePath":"guide/assets.md","lastUpdated":1619627917412}',t={},o=a('<h1 id="assets"><a class="header-anchor" href="#assets" aria-hidden="true">#</a> Assets</h1><p>So far, we&#39;ve only taken a look on Chunks, which is great for most kinds of data that your app would consume. But what about assets, like images? That&#39;s easy as well:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ComputerSetups <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-computed&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> computers<span class="token operator">:</span> ComputerSetups <span class="token operator">=</span> <span class="token punctuation">{</span>\n\texample<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&#39;asset&#39;</span><span class="token punctuation">,</span>\n\t\tfileExt<span class="token operator">:</span> <span class="token string">&#39;svg&#39;</span><span class="token punctuation">,</span>\n\n\t\t<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token string">&#39;&lt;svg&gt;...&lt;/svg&gt;&#39;</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>You can use it like this in your app:</p><div class="language-js"><pre><code><span class="token keyword">import</span> image <span class="token keyword">from</span> <span class="token string">&#39;example.computed&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; /dist/example-ca5b68.svg</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> image<span class="token punctuation">;</span>\n</code></pre></div><h2 id="fn"><a class="header-anchor" href="#fn" aria-hidden="true">#</a> <code>fn</code></h2><p>The computer function. It will be executed at build-time (never in the browser) and the returned data will be saved and included in the bundle.</p><h2 id="fileext"><a class="header-anchor" href="#fileext" aria-hidden="true">#</a> <code>fileExt</code></h2><p>This option is required. Specify the asset&#39;s file extension, like <code>png</code>, <code>json</code>, etc.</p><h2 id="alwaysbuild"><a class="header-anchor" href="#alwaysbuild" aria-hidden="true">#</a> <code>alwaysBuild?</code></h2><p>If you don&#39;t import your computed asset anywhere in the app, Rollup will not include it in the output bundle. This is great for removing bloat, but sometimes not desired. You can set <code>alwaysBuild</code> to true, to circumvent this.</p><h2 id="filename"><a class="header-anchor" href="#filename" aria-hidden="true">#</a> <code>fileName?</code></h2><p>Specify a custom filename with the <code>fileName</code> option. This overrides the default Rollup filename.</p>',13);t.render=function(a,e,t,p,l,c){return s(),n("div",null,[o])};export default t;export{e as __pageData};
