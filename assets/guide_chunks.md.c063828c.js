import{o as n,c as s,b as a}from"./app.7cbc1c56.js";const t='{"title":"Chunks","description":"","frontmatter":{"title":"Chunks"},"headers":[{"level":2,"title":"fn","slug":"fn"},{"level":2,"title":"serializer?","slug":"serializer"},{"level":3,"title":"Custom serializers","slug":"custom-serializers"},{"level":3,"title":"JSON collection","slug":"json-collection"},{"level":2,"title":"split?","slug":"split"},{"level":2,"title":"fileName?","slug":"filename"}],"relativePath":"guide/chunks.md","lastUpdated":1619627185151}',e={},o=a('<h1 id="chunks"><a class="header-anchor" href="#chunks" aria-hidden="true">#</a> Chunks</h1><p>For simple usage, passing an object of functions to the plugin is adequate. Sometimes though, you probably want to make use of the options below.</p><p>To specify options, you can register computers like this:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Computers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-computed&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> computers<span class="token operator">:</span> Computers <span class="token operator">=</span> <span class="token punctuation">{</span>\n\texample<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// options go here</span>\n\t\tserializer<span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>\n\t\tfileName<span class="token operator">:</span> <span class="token string">&#39;example-data.js&#39;</span><span class="token punctuation">,</span>\n\t\tsplit<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\n\t\t<span class="token comment">// the computer function</span>\n\t\t<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token string">&#39;it works!&#39;</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="fn"><a class="header-anchor" href="#fn" aria-hidden="true">#</a> <code>fn</code></h2><p>The computer function. It will be executed at build-time (never in the browser) and the returned data can be imported in your app.</p><h2 id="serializer"><a class="header-anchor" href="#serializer" aria-hidden="true">#</a> <code>serializer?</code></h2><p>In our computer function, we pass back a string. To import it though, we need to return an ES module. The serializer takes care of transforming our returned data to ESM. By default, it is set to <code>json</code>, which will <code>JSON.stringify</code> the data and set that as the default export.</p><p>You can disable serialization by passing <code>false</code>.</p><h3 id="custom-serializers"><a class="header-anchor" href="#custom-serializers" aria-hidden="true">#</a> Custom serializers</h3><p>You can define a custom serializer as such:</p><div class="language-js"><pre><code><span class="token keyword">const</span> computers <span class="token operator">=</span> <span class="token punctuation">{</span>\n\texample<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">serializer</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        const text = &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>input<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;;\n        export { text };\n      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token string">&#39;it works!&#39;</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>Which would yield the following module:</p><div class="language-js"><pre><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;it works!&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> text <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>And can be imported as follows:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;example.computed&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="json-collection"><a class="header-anchor" href="#json-collection" aria-hidden="true">#</a> JSON collection</h3><p>There is also another serializer built in called <code>json-collection</code>. Sometimes it&#39;s handy to return not just one chunk, but multiple ones at a time - for example when returning a set of blog posts. Yet, the client might only need some of these.</p><p>When setting <code>serializer</code> to <code>json-collection</code>, you can return an object like this:</p><div class="language-js"><pre><code><span class="token punctuation">{</span>\n\tserializer<span class="token operator">:</span> <span class="token string">&#39;json-collection&#39;</span><span class="token punctuation">,</span>\n\t<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\tfirstPost<span class="token operator">:</span> <span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">,</span>\n\t\t\tsecondPost<span class="token operator">:</span> <span class="token string">&#39;My fingers hurt from writing&#39;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>In your app, you can then load each &quot;post&quot; on-demand:</p><div class="language-js"><pre><code><span class="token keyword">import</span> posts <span class="token keyword">from</span> <span class="token string">&#39;example.computed&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// let&#39;s get the first post</span>\n<span class="token keyword">const</span> firstPost <span class="token operator">=</span> <span class="token keyword">await</span> posts<span class="token punctuation">.</span><span class="token function">firstPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstPost<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; Hello!</span>\n</code></pre></div><h2 id="split"><a class="header-anchor" href="#split" aria-hidden="true">#</a> <code>split?</code></h2><p>To force-split the computed data into a seperate file, set <code>split</code> to <code>true</code>. Otherwise, it will be inlined into the chunk of the module that imports the computer. Rollup is smart enough to split it automatically in most cases, if for example multiple modules require the computer.</p><h2 id="filename"><a class="header-anchor" href="#filename" aria-hidden="true">#</a> <code>fileName?</code></h2><p>If the computer gets split, you can set a custom filename here. This overrides the default Rollup filename.</p>',26);e.render=function(a,t,e,p,c,l){return n(),s("div",null,[o])};export default e;export{t as __pageData};
